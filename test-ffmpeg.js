#!/usr/bin/env node

/**
 * Script de teste para verificar se FFmpeg est√° dispon√≠vel
 * Use este script no Replit para validar a configura√ß√£o
 */

const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function testFFmpeg() {
  console.log('üîç Testando disponibilidade do FFmpeg...\n');
  
  try {
    // Testar se FFmpeg est√° no PATH
    const { stdout } = await execAsync('ffmpeg -version');
    
    console.log('‚úÖ FFmpeg est√° dispon√≠vel!');
    console.log('üìã Vers√£o:', stdout.split('\n')[0]);
    
    // Testar FFprobe tamb√©m
    try {
      const { stdout: probeOutput } = await execAsync('ffprobe -version');
      console.log('‚úÖ FFprobe est√° dispon√≠vel!');
      console.log('üìã Vers√£o:', probeOutput.split('\n')[0]);
    } catch (probeError) {
      console.log('‚ö†Ô∏è  FFprobe n√£o encontrado, mas FFmpeg est√° OK');
    }
    
    console.log('\nüéâ Sistema pronto para transcri√ß√£o de √°udios!');
    return true;
    
  } catch (error) {
    console.log('‚ùå FFmpeg n√£o encontrado!');
    console.log('üìù Erro:', error.message);
    
    console.log('\nüîß Para corrigir no Replit:');
    console.log('1. Verifique se o arquivo replit.nix existe');
    console.log('2. Execute "Reload Environment" no Replit');
    console.log('3. Aguarde a reconstru√ß√£o do ambiente');
    console.log('4. Execute este teste novamente');
    
    return false;
  }
}

async function testAudioService() {
  console.log('\nüß™ Testando servi√ßo de transcri√ß√£o...\n');
  
  try {
    const AudioTranscriptionService = require('./src/audio-transcription-service');
    const audioService = new AudioTranscriptionService();
    
    // Aguardar verifica√ß√£o do FFmpeg
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    if (audioService.ffmpegAvailable) {
      console.log('‚úÖ Servi√ßo de transcri√ß√£o inicializado com sucesso!');
      console.log('üìÅ Diret√≥rio tempor√°rio:', audioService.tempDir);
      return true;
    } else {
      console.log('‚ùå Servi√ßo de transcri√ß√£o n√£o dispon√≠vel');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå Erro ao testar servi√ßo:', error.message);
    return false;
  }
}

async function main() {
  console.log('ü§ñ Teste de Configura√ß√£o do WhatsApp Bot - Replit\n');
  console.log('='.repeat(50));
  
  const ffmpegOk = await testFFmpeg();
  
  if (ffmpegOk) {
    await testAudioService();
    
    console.log('\n‚ú® Configura√ß√£o completa!');
    console.log('üì± O bot est√° pronto para receber √°udios do WhatsApp');
    
  } else {
    console.log('\n‚ö†Ô∏è  Configura√ß√£o incompleta');
    console.log('üîß Siga as instru√ß√µes acima para corrigir');
  }
  
  console.log('\n' + '='.repeat(50));
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testFFmpeg, testAudioService };
