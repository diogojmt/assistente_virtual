const TextNormalizer = require('./src/text-normalizer');

// Criar inst√¢ncia do normalizador
const normalizer = new TextNormalizer();

// Casos de teste comuns em transcri√ß√µes de √°udio
const testCases = [
  {
    name: "CPF com pontos e tra√ßos",
    input: "Meu CPF √© 123.456.789-01",
    expected: "Meu CPF √© 12345678901"
  },
  {
    name: "CPF com espa√ßos (pausas na fala)",
    input: "CPF 123 456 789 01",
    expected: "CPF 12345678901"
  },
  {
    name: "CNPJ com formata√ß√£o",
    input: "CNPJ da empresa: 12.345.678/0001-90",
    expected: "CNPJ da empresa: 12345678000190"
  },
  {
    name: "Telefone com espa√ßos e tra√ßos",
    input: "Telefone: 11 9-8765-4321",
    expected: "Telefone: 11987654321"
  },
  {
    name: "CEP com tra√ßo",
    input: "CEP: 01234-567",
    expected: "CEP: 01234567"
  },
  {
    name: "M√∫ltiplos n√∫meros no texto",
    input: "CPF 123.456.789-01 telefone 11 98765-4321",
    expected: "CPF 12345678901 telefone 11987654321"
  },
  {
    name: "Protocolo com pontos",
    input: "Protocolo n√∫mero 2023.12.345.678",
    expected: "Protocolo n√∫mero 202312345678"
  },
  {
    name: "RG com tra√ßos",
    input: "RG: 12-345-678-9",
    expected: "RG: 123456789"
  },
  {
    name: "Valor decimal (deve preservar)",
    input: "O valor √© R$ 123,45",
    expected: "O valor √© R$ 123,45"
  },
  {
    name: "N√∫mero simples (deve preservar)",
    input: "Tenho 25 anos",
    expected: "Tenho 25 anos"
  },
  {
    name: "Texto sem n√∫meros",
    input: "Ol√°, como voc√™ est√°?",
    expected: "Ol√°, como voc√™ est√°?"
  }
];

console.log('=== TESTE DO NORMALIZADOR DE TEXTO ===\n');

let passedTests = 0;
let failedTests = 0;

testCases.forEach((testCase, index) => {
  console.log(`Teste ${index + 1}: ${testCase.name}`);
  console.log(`Entrada:   "${testCase.input}"`);
  
  const result = normalizer.normalizeText(testCase.input);
  console.log(`Resultado: "${result}"`);
  console.log(`Esperado:  "${testCase.expected}"`);
  
  const passed = result === testCase.expected;
  if (passed) {
    console.log('‚úÖ PASSOU\n');
    passedTests++;
  } else {
    console.log('‚ùå FALHOU\n');
    failedTests++;
  }
});

console.log('=== RESUMO DOS TESTES ===');
console.log(`‚úÖ Passou: ${passedTests}`);
console.log(`‚ùå Falhou: ${failedTests}`);
console.log(`üìä Total: ${testCases.length}`);

if (failedTests === 0) {
  console.log('\nüéâ Todos os testes passaram!');
} else {
  console.log(`\n‚ö†Ô∏è  ${failedTests} teste(s) falharam. Verifique a implementa√ß√£o.`);
}

// Teste espec√≠fico para detec√ß√£o de necessidade de normaliza√ß√£o
console.log('\n=== TESTE DE DETEC√á√ÉO ===');
const detectionTests = [
  { text: "CPF 123.456.789-01", shouldNeed: true },
  { text: "Ol√° mundo", shouldNeed: false },
  { text: "Telefone 11 98765-4321", shouldNeed: true },
  { text: "Tenho 25 anos", shouldNeed: false }
];

detectionTests.forEach(test => {
  const needs = normalizer.needsNormalization(test.text);
  const correct = needs === test.shouldNeed;
  console.log(`"${test.text}" - Precisa: ${needs} (esperado: ${test.shouldNeed}) ${correct ? '‚úÖ' : '‚ùå'}`);
});

console.log('\n=== EXEMPLOS DE NORMALIZA√á√ÉO ===');
normalizer.showNormalizationExample();
